

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User{
  id String @id @default(uuid()) @db.Uuid
  email String @unique
  sub String?
  name String?
  lastName String?
  password String?
  telephone String?
  image String?
  contactSave Boolean @default(false)
  country      String?
  city         String?
  street       String?
  houseNumber  String?
  apartment    String?
  paymentType    String?
  cardNumber     String?
  expiryDate     DateTime?
  cvv            String?
  billingAddress String?
  favorite Favorite?
  drawer Drawer?
  order Order[]
  return Return[]
}
model Product {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  smallImgs   String[]
  bigImgs     String[]
  price       Float
  oldprice    Float?
  counts      Int
  colors      String[]
  sizes       String[]
  tags        String[]
  brand       String
  gender      String
  collection  String[]
  discountTime DateTime?
  createAt    DateTime  @default(now())
  rating      Float     @default(0.0)
  votesCount  String[]
  favorites   Favorite[] @relation("FavoriteProducts")
  drawers     DrawerItem[] 
  orders      Order[]     @relation("OrderProducts")
  returns     Return[]    @relation("ReturnProducts") 
}
model DrawerItem{
  id        String        @id @default(uuid()) @db.Uuid
  drawerId String @db.Uuid
  productId String @db.Uuid
  countsDrawer Int
  color String
  size String
  img String
  price Float
  name String
  createdAt DateTime  @default(now())
  drawer Drawer @relation(fields: [drawerId], references: [id])
  product Product @relation(fields: [productId],references: [id])
}

model Drawer {
  id        String        @id @default(uuid()) @db.Uuid
  userId    String  @db.Uuid @unique
  subtotal Float @default(0)
  wrap Boolean @default(false)
  user      User          @relation(fields: [userId], references: [id])
  items     DrawerItem[]
}

model Favorite{
  id String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid @unique
  user User @relation(fields: [userId],references: [id])
  products Product[] @relation("FavoriteProducts")
  @@unique([userId, id])
}

model Order {
  id        String   @id @default(uuid()) @db.Uuid
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  status    String
  userID    String  @db.Uuid @unique
  user      User     @relation(fields: [userID], references: [id])
  products  Product[] @relation("OrderProducts")
}
model Return {
  id        String   @id @default(uuid()) @db.Uuid
  createAt  DateTime @default(now())
  userID    String @db.Uuid @unique
  user      User     @relation(fields: [userID], references: [id])
  products  Product[] @relation("ReturnProducts")
}


model Subscribe {
  id    String @id @default(uuid()) @db.Uuid
  email String @unique
}